Here are examples of both for and while loops in Python:

For Loop:
  
# Example 1: Iterating over a list
fruits = ['apple', 'banana', 'orange']
for fruit in fruits:
    print(fruit)

# Output:
# apple
# banana
# orange

# Example 2: Using the range function
for i in range(1, 5):
    print(i)

# Output:
# 1
# 2
# 3
# 4

While Loop:  
# Example 1: Simple while loop
count = 0
while count < 3:
    print(f'Count: {count}')
    count += 1

# Output:
# Count: 0
# Count: 1
# Count: 2

# Example 2: Using a while loop to find the first power of 2 greater than 100
power_of_two = 1
while power_of_two <= 100:
    power_of_two *= 2

print(f'The first power of 2 greater than 100 is: {power_of_two}')

# Output:
# The first power of 2 greater than 100 is: 128

Let's break down the steps of how the value of power_of_two evolves in each iteration of the loop:

Initial State:
power_of_two = 1
First Iteration:

bash 
power_of_two *= 2
# Now, power_of_two = 2

Second Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 4

Third Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 8

Fourth Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 16

Fifth Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 32

Sixth Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 64

Seventh Iteration:
bash
power_of_two *= 2
# Now, power_of_two = 128
At this point, the condition power_of_two <= 100 becomes false, and the loop exits. 
The final value of power_of_two is 128, which is the first power of 2 greater than 100.

So, in summary, the loop doubles the value of power_of_two in each iteration until it exceeds 100, resulting in the final value of 128.

These examples demonstrate the basic syntax and usage of for and while loops in Python.
The for loop is typically used for iterating over a sequence (e.g., list, tuple, string) or using the range function,
while the while loop is used when a certain condition needs to be satisfied for the loop to continue executing.
  
