Lists and tuples are two fundamental data structures in Python that allow you to store and manipulate collections of items.

### Lists:

#### 1. **Creation:**
   ```python
   my_list = [1, 2, 3, 'apple', 'banana']
   ```

#### 2. **Indexing:**
   - Access elements using indices (starting from 0).
   ```python
   print(my_list[0])  # Output: 1
   print(my_list[3])  # Output: apple
   ```

#### 3. **Slicing:**
   - Extract a portion of the list.
   ```python
   print(my_list[1:3])  # Output: [2, 3]
   ```

#### 4. **Basic Operations:**
   - Adding elements:
     ```python
     my_list.append('orange')  # Adds 'orange' to the end
     my_list.insert(1, 'grape')  # Inserts 'grape' at index 1
     ```

   - Removing elements:
     ```python
     my_list.remove('banana')  # Removes 'banana'
     popped_item = my_list.pop(2)  # Removes and returns the item at index 2
     ```

   - Concatenation:
     ```python
     new_list = my_list + [4, 5, 6]
     ```

   - Length:
     ```python
     length = len(my_list)
     ```


### Tuples:

#### 1. **Creation:**
   ```python
   my_tuple = (1, 2, 3, 'apple', 'banana')
   ```

#### 2. **Indexing:**
   - Similar to lists.
   ```python
   print(my_tuple[0])  # Output: 1
   ```

#### 3. **Slicing:**
   - Similar to lists.
   ```python
   print(my_tuple[1:3])  # Output: (2, 3)
   ```

#### 4. **Immutability:**
   - Tuples are immutable, meaning their elements cannot be changed after creation.
   ```python
   # This will raise an error
   my_tuple[0] = 5
   ```


#### 5. **Basic Operations:**
   - Concatenation:
     ```python
     new_tuple = my_tuple + (4, 5, 6)
     ```

   - Length:
     ```python
     length = len(my_tuple)
     ```




